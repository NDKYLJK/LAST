#pragma checksum "C:\Users\20795\Desktop\软件实训开发大作业\MVC---FinalProject\TZstore\TZstore\Views\Product\Create.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "732ca0fb3fb92dda6297f1bb443127d6a9657f1d"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Product_Create), @"mvc.1.0.view", @"/Views/Product/Create.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "C:\Users\20795\Desktop\软件实训开发大作业\MVC---FinalProject\TZstore\TZstore\Views\_ViewImports.cshtml"
using TZstore;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\20795\Desktop\软件实训开发大作业\MVC---FinalProject\TZstore\TZstore\Views\_ViewImports.cshtml"
using TZstore.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"732ca0fb3fb92dda6297f1bb443127d6a9657f1d", @"/Views/Product/Create.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"f2ae085459a130b9f395fb5d49c1cc3b0e32c6b7", @"/Views/_ViewImports.cshtml")]
    public class Views_Product_Create : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("style", new global::Microsoft.AspNetCore.Html.HtmlString("margin: 0;"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.HeadTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper;
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            WriteLiteral("\r\n<!DOCTYPE html>\r\n<html>\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("head", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "732ca0fb3fb92dda6297f1bb443127d6a9657f1d3644", async() => {
                WriteLiteral("\r\n    <title>添加产品</title>\r\n    <meta charset=\"UTF-8\" />\r\n    <!-- import CSS -->\r\n    <link href=\"https://unpkg.com/element-ui/lib/theme-chalk/index.css\"\r\n          rel=\"stylesheet\" />\r\n");
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.HeadTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("body", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "732ca0fb3fb92dda6297f1bb443127d6a9657f1d4810", async() => {
                WriteLiteral(@"
    <el-container id=""app"" style=""height: 700px; background-color: rgb(0, 183, 255);"">
        <el-main>
            <el-row>
                <el-col :span=""12"" offset=""6"">
                    <el-card class=""box-card"" style=""height: 700px;"">
                        <el-form :model=""product""
                                 :rules=""rules""
                                 label-width=""auto""
                                 ref=""form"">
                            <el-row>
                                <el-col>
                                    <el-form-item :rules=""rules.productNumberRules""
                                                  label=""产品序号""
                                                  prop=""productNumber"">
                                        <el-input placeholder=""请输入产品序号""
                                                  v-model=""product.productNumber"">
                                        </el-input>
                                    </el-form-item>
          ");
                WriteLiteral(@"                      </el-col>
                            </el-row>
                            <el-row>
                                <el-col>
                                    <el-form-item :rules=""rules.productNameRules""
                                                  label=""产品名称""
                                                  prop=""productName"">
                                        <el-input placeholder=""请输入产品名称""
                                                  v-model=""product.productName"">
                                        </el-input>
                                    </el-form-item>
                                </el-col>
                            </el-row>
                            <el-row>
                                <el-col>
                                    <el-form-item label=""产品类型"">
                                        <el-radio-group v-model=""product.productType"">
                                            <el-radio label=""荤菜""></el-radio>
");
                WriteLiteral(@"                                            <el-radio label=""素菜""></el-radio>
                                            <el-radio label=""甜品""></el-radio>
                                            <el-radio label=""饮料""></el-radio>
                                        </el-radio-group>
                                    </el-form-item>
                                </el-col>
                            </el-row>
                            <el-row>
                                <el-col>
                                    <el-form-item :rules=""rules.priceRules""
                                                  label=""价格""
                                                  prop=""price"">
                                        <el-input placeholder=""请输入价格""
                                                  v-model=""product.price"">
                                        </el-input>
                                    </el-form-item>
                                </el-col>
                ");
                WriteLiteral(@"            </el-row>
                            <el-row>
                                <el-col>
                                    <el-form-item :rules=""rules.inventoryRules""
                                                  label=""库存数""
                                                  prop=""inventory"">
                                        <el-input placeholder=""请输入库存数""
                                                  v-model=""product.inventory"" onKeypress=""return (/[\d]/.test(String.fromCharCode(event.keyCode)))"">
                                        </el-input>
                                    </el-form-item>
                                </el-col>
                            </el-row>
                            <el-row>
                                <el-col>
                                    <el-form-item label=""上传图片"">
                                        <el-upload :on-success=""onPictureUploadSuccess""
                                                   :show-file-li");
                WriteLiteral(@"st=""false""
                                                   action=""/Product/UploadImage"">
                                            <el-button>
                                                选择文件
                                            </el-button>
                                        </el-upload>
                                        <el-image :src=""'/upload/' + product.imgUrl""
                                                  fit=""contain""
                                                  style=""height: 250px;"">
                                            <div slot=""error"">
                                                <i class=""el-icon-picture-outline""></i>
                                            </div>
                                        </el-image>
                                    </el-form-item>
                                </el-col>
                            </el-row>
                            <el-row>
                                <el-col style=""te");
                WriteLiteral(@"xt-align: center;"">
                                    <el-form-item>
                                        <el-button type=""primary""
                                                   v-on:click=""onAddButtonClick"">
                                            添加
                                        </el-button>
                                        <el-button v-on:click=""onBackButtonClick"">返回</el-button>
                                    </el-form-item>
                                </el-col>
                            </el-row>
                        </el-form>
                    </el-card>
                </el-col>
            </el-row>
        </el-main>
    </el-container>
    <!-- import Vue before Element -->
    <script src=""https://unpkg.com/vue/dist/vue.js""></script>
    <!-- import JavaScript -->
    <script src=""https://unpkg.com/element-ui/lib/index.js""></script>
    <script src=""https://cdn.bootcdn.net/ajax/libs/axios/0.19.2/axios.js""></script>
    <script>
  ");
                WriteLiteral(@"      const app = new Vue({
            el: ""#app"",
            data: {
                product: {
                    productNumber: '',
                    productName: '',
                    productType: '荤菜',
                    price: '',
                    imgUrl: ''
                },
                rules: {
                    productNumberRules: [
                        { required: true, message: '请输入产品序号', trigger: 'blur' }
                    ],
                    productNameRules: [
                        { required: true, message: '请输入产品名称', trigger: 'blur' }
                    ],
                    priceRules: [
                        { required: true, message: '请输入产品价格', trigger: 'blur' },
                        // 自定义校验
                        {
                            validator: (rule, value, callback) => {
                                if (value <= 0) {
                                    callback(new Error('价格必须大于 0'));
                               ");
                WriteLiteral(@" } else {
                                    callback();
                                }
                            }
                        }
                    ],
                    inventoryRules: [
                        { required: true, message: '请输入产品库存', trigger: 'blur' },
                        // 自定义校验
                        {
                            validator: (rule, value, callback) => {
                                if (value < 0) {
                                    callback(new Error('库存必须大于或等于0'));
                                } else {
                                    callback();
                                }
                            }
                        }
                    ]


                }
            },
            methods: {
                async onAddButtonClick() {
                    this.$refs['form'].validate(async (valid) => {
                        if (valid) {
                            const response = await axi");
                WriteLiteral(@"os.post('/Product/Create', this.product);

                            if (response.data.code === 'success') {
                                this.$message({
                                    message: '记录插入成功',
                                    type: 'success'
                                });

                                this.onBackButtonClick();
                            } else {
                                this.$message({
                                    message: '记录插入失败',
                                    type: 'error'
                                });
                            }
                            return true;
                        } else {
                            return false;
                        }
                    });
                },
                onBackButtonClick() {
                    window.location.href = ""/Product/Index"";
                },
                onPictureUploadSuccess: function (response, file, fileList) {
 ");
                WriteLiteral(@"                   if (response.code === ""success"") {
                        this.product.imgUrl = response.data;
                    }
                    else {
                        this.$message({
                            message: '图片上传失败',
                            type: 'error'
                        });
                    }
                },
                //用于界面的安全防止非管理员直接用URl
                async LoginAndAdmin() {

                    //用于判断用户有没有登录并且时不时管理员
                    let response = await axios.get('/User/LoginAndAdmin');
                    if (response.data.code === 'success') {

                    } else if (response.data.code === 'NoAdmin') {
                        this.$confirm('您不是管理员',
                            '提示',
                            {
                                confirmButtonText: '确定',
                                cancelButtonText: '取消',
                                type: 'warning'
                            })
         ");
                WriteLiteral(@"                   .then(async () => {
                                //返回用户前台
                                window.location.href = ""/User/Index"";
                                //await this.deleteProduct(id);
                            })
                            .catch(() => {
                                //返回用户前台
                                window.location.href = ""/User/Index"";
                            });
                    }
                    else {
                        this.$confirm('您还未登录',
                            '提示',
                            {
                                confirmButtonText: '确定',
                                cancelButtonText: '取消',
                                type: 'warning'
                            })
                            .then(async () => {
                                //返回用户前台
                                window.location.href = ""/User/Index"";
                                //await this.deleteProduct(id");
                WriteLiteral(@");
                            })
                            .catch(() => {
                                //返回用户前台
                                window.location.href = ""/User/Index"";
                            });
                    }
                }

            },
            mounted() {
                //防止非法用户直接用URL
                this.LoginAndAdmin();
            }
        });
    </script>
");
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n\r\n</html>");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
