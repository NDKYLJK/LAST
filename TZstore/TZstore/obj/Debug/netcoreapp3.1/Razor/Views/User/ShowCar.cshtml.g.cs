#pragma checksum "C:\Users\20795\Desktop\软件实训开发大作业\MVC---FinalProject\TZstore\TZstore\Views\User\ShowCar.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "3348a3aa3bbb0161094d9fc9ee4b09953f811cc1"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_User_ShowCar), @"mvc.1.0.view", @"/Views/User/ShowCar.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "C:\Users\20795\Desktop\软件实训开发大作业\MVC---FinalProject\TZstore\TZstore\Views\_ViewImports.cshtml"
using TZstore;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\20795\Desktop\软件实训开发大作业\MVC---FinalProject\TZstore\TZstore\Views\_ViewImports.cshtml"
using TZstore.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"3348a3aa3bbb0161094d9fc9ee4b09953f811cc1", @"/Views/User/ShowCar.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"f2ae085459a130b9f395fb5d49c1cc3b0e32c6b7", @"/Views/_ViewImports.cshtml")]
    public class Views_User_ShowCar : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("style", new global::Microsoft.AspNetCore.Html.HtmlString("margin: 0;"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.HeadTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper;
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            WriteLiteral("<!DOCTYPE html>\r\n<html>\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("head", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "3348a3aa3bbb0161094d9fc9ee4b09953f811cc13630", async() => {
                WriteLiteral("\r\n    <title>提交订单页面</title>\r\n    <meta charset=\"UTF-8\" />\r\n    <!-- import CSS -->\r\n    <link href=\"https://unpkg.com/element-ui/lib/theme-chalk/index.css\"\r\n          rel=\"stylesheet\" />\r\n");
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.HeadTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("body", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "3348a3aa3bbb0161094d9fc9ee4b09953f811cc14798", async() => {
                WriteLiteral(@"
    <el-container id=""app"" style=""height:100%; background-color: rgb(0, 183, 255);"">
        <el-main>
            <el-row>
                <el-col :span=""12"" offset=""6"">
                    <el-card class=""box-card"" style=""height: 700px;"">
                        <el-form :model=""product""
                                 label-width=""auto""
                                 ref=""form"">
                            <el-row>
                                <el-col>
                                    <el-form-item label=""产品序号"">
                                        <el-input :disabled=""true""
                                                  v-model=""product.productNumber"">
                                        </el-input>
                                    </el-form-item>
                                </el-col>
                            </el-row>
                            <el-row>
                                <el-col>
                                    <el-form-item label=""产品名称");
                WriteLiteral(@""">
                                        <el-input :disabled=""true""
                                                  v-model=""product.productName"">
                                        </el-input>
                                    </el-form-item>
                                </el-col>
                            </el-row>
                            <el-row>
                                <el-col>
                                    <el-form-item label=""产品类型"">
                                        <el-input :disabled=""true""
                                                  v-model=""product.productType"">
                                        </el-input>
                                    </el-form-item>
                                </el-col>
                            </el-row>
                            <el-row>
                                <el-col>
                                    <el-form-item label=""价格"">
                                        <el-input :disab");
                WriteLiteral(@"led=""true""
                                                  v-model=""product.price"">
                                        </el-input>
                                    </el-form-item>
                                </el-col>
                            </el-row>
                            <el-row>
                                <el-col>
                                    <el-form-item label=""库存数"">
                                        <el-input :disabled=""true""
                                                  v-model=""product.inventory"">
                                        </el-input>
                                    </el-form-item>
                                </el-col>
                            </el-row>
                            <el-row>
                                <el-col>
                                    <el-form-item label=""图片"">
                                        <el-image :src=""'/upload/' + product.imgUrl""
                                       ");
                WriteLiteral(@"           fit=""contain""
                                                  style=""height: 200px;"">
                                            <div slot=""error"">
                                                <i class=""el-icon-picture-outline""></i>
                                            </div>
                                        </el-image>
                                    </el-form-item>
                                </el-col>
                            </el-row>
                            <el-row>
                                <el-col>
                                    <el-form-item :rules=""[{ required: true, message: '请输入数量', trigger: 'blur' },{required: true,pattern:/^\+?[1-9][0-9]*$/,message: '只能输入大于零的整数',trigger: 'blur'}]"" label=""数量"" prop=""buyNum"">
                                        <el-input placeholder=""请输入数量""
                                                  v-model=""product.buyNum"" onKeypress=""return (/[\d]/.test(String.fromCharCode(event.keyCode)))"">
        ");
                WriteLiteral(@"                                </el-input>
                                    </el-form-item>
                                </el-col>
                            </el-row>
                            <el-row>
                                <el-col style=""text-align: center;"">
                                    <el-form-item>
                                        <el-button type=""primary""
                                                   v-on:click=""onOKButtonClick"">
                                            提交订单
                                        </el-button>
                                        <el-button v-on:click=""onBackButtonClick"">返回</el-button>
                                    </el-form-item>
                                </el-col>
                            </el-row>
                        </el-form>
                    </el-card>
                </el-col>
            </el-row>
        </el-main>
    </el-container>
    <!-- import Vue before Element -->");
                WriteLiteral(@"
    <script src=""https://unpkg.com/vue/dist/vue.js""></script>
    <!-- import JavaScript -->
    <script src=""https://unpkg.com/element-ui/lib/index.js""></script>
    <script src=""https://cdn.bootcdn.net/ajax/libs/axios/0.19.2/axios.js""></script>
    <script>
    const app = new Vue({
        el: ""#app"",
        data: {
            product: {}
        },
        methods: {
            //提交订单
            async onOKButtonClick() {

                //this.updateProduct();
            },
            //返回浏览首页
            onBackButtonClick() {
                window.location.href = ""/User/Index"";
            },
            async getProductById(id) {
                let response = await axios.get('/Product/GetProductById', { params: { id: id } });

                if (response.data.code === 'success') {
                    this.product = response.data.data;

                    //将数值类型的价格转化为字符串类型以便于展示数据对应的是ProductVO
                    this.product.price = this.product.price.toString();
");
                WriteLiteral(@"                    this.product.inventory = this.product.inventory.toString();
                    this.product.id = id;
                }
            },
            //跟新（插入新的）订单
            async onOKButtonClick() {
                this.updateOrder();
            },
            async updateOrder() {

                let response = await axios.post('/User/updateOrder', this.product);

                if (response.data.code === 'success') {
                    this.$message({
                        message: '提交成功',
                        type: 'success'
                    });
                    this.onBackButtonClick();
                } else if (response.data.code === 'NoLogin') {
                    this.$message({
                        message: '还没有登录',
                        type: 'error'
                    });

                }
                else if (response.data.code === 'noBuyNum') {
                    this.$message({
                        message: '下单数量必须大于零！！");
                WriteLiteral(@"',
                        type: 'error'
                    });
                }
                else if (response.data.code === 'isAdmin') {
                    this.$message({
                        message: '管理员不可以下单哦！！',
                        type: 'error'
                    });
                } else if (response.data.code === 'Lack') {
                    this.$message({
                        message: '亲,库存不够了',
                        type: 'error'
                    });
                }
                else {
                    this.$message({
                        message: '提交失败',
                        type: 'error'
                    });
                }
            },
            //用于界面的安全防止非管理员直接用URl
            async LoginAndAdmin() {

                //用于判断用户有没有登录并且时不时管理员
                let response = await axios.get('/User/LoginAndAdmin');
                if (response.data.code === 'success' || response.data.code === 'NoAdmin') {

                }");
                WriteLiteral(@" else {
                    this.$confirm('您还未登录',
                        '提示',
                        {
                            confirmButtonText: '确定',
                            cancelButtonText: '取消',
                            type: 'warning'
                        })
                        .then(async () => {
                            //返回用户前台
                            window.location.href = ""/User/Index"";
                            //await this.deleteProduct(id);
                        })
                        .catch(() => {
                            //返回用户前台
                            window.location.href = ""/User/Index"";
                        });
                }
            }
        },
        mounted() {
            this.getProductById(");
#nullable restore
#line 209 "C:\Users\20795\Desktop\软件实训开发大作业\MVC---FinalProject\TZstore\TZstore\Views\User\ShowCar.cshtml"
                           Write(ViewBag.id);

#line default
#line hidden
#nullable disable
                WriteLiteral(");\r\n            //用于防止非法用户直接用URL\r\n            this.LoginAndAdmin();\r\n        }\r\n    });\r\n    </script>\r\n");
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n\r\n</html>");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
